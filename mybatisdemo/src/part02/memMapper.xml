<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 <mapper namespace="mem">
 <select id="all" resultType="part02.dto.MemDTO">
 	select * from mem order by num desc
 </select>

<!-- insert,update,delete result타입은 알아서 integer로 해준다 --> 
 <insert id="ins" parameterType="part02.dto.MemDTO" >
  	<!-- 테이블에서 null값을 허용한 컬럼에 null값을 insert할때는 컬럼에 jdbcType=VARCHAR을 지정해준다. -->
  	<!--  insert할때 null값을 허용할때는 #{컬럼명,jdbcType=VARCHAR} -->
  	<!--  숫자는 NUMERIC or INTEGER -->
 	insert into mem values(mem_num_seq.nextval,#{name,jdbcType=VARCHAR},#{age,jdbcType=NUMERIC},#{loc,jdbcType=VARCHAR})
 </insert>
 
 <update id="upt" parameterType="java.util.HashMap">
 	update mem set loc=#{loc} where num=#{num}
 </update>
 
 <!-- parameterType을 alias값으로 대체 할 수 있다. java.Lang.Integer -> int -->
 <delete id="del" parameterType="int">
 delete from mem where num=#{num}
 </delete>
 
 <select id="keyNum" resultType="int" flushCache="true">
 	select mem_num_seq.nextval from dual
 </select>
 
 <!-- 다중 insert -->
 <insert id="multiIns" parameterType="java.util.List">
 insert all 
 <!-- 배열로 넘어오면 array   컬렉션값은 list or array 만 된다. -->
 <foreach collection="list" item="element" index="no">
 	into mem values(#{element.num},#{element.name},#{element.age},#{element.loc})
 </foreach>
 	select * from dual
 </insert>
 
 <!-- 다중 delete -->
 <delete id="multiDel">
 delete from mem 
 <where>
 num in 
 <foreach collection="list" item="element" open="(" separator="," close=")">
 #{element}
 </foreach>
 </where>
 </delete>
 
 
 <delete id="multiDel2">
 delete from mem 
 <where>
 num in 
 <foreach collection="array" item="element" open="(" separator="," close=")">
 #{element}
 </foreach>
 </where>
 </delete>
 
 <!-- dynamic if -->
 <select id="search" parameterType="part02.dto.MemDTO" resultType="part02.dto.MemDTO">
 	select * from mem
 <!-- 	<where>
 	<if test="name!=null">
 		name like '%' || #{name} || '%'
 	</if>
 	<if test="age!=0">
 		or age > #{age}
 	</if>
 	</where> -->
 	
 	<!-- suffixOverrides 는 앞의 where절의 or이나 and 제거  
 	prefixOveerrides 는 뒤의 where절의 or이나 and 제거 -->
 	<trim prefix="where" suffixOverrides="or/and">
 	<if test="name!=null">
 	name like '%' || #{name} || '%' or 
 	</if>
 	<if test="age!=0">
 	age >#{age}
 	</if>
 	
 	</trim>
 	order by num desc
 </select>
 
 <update id="multiUpt" parameterType="part02.dto.MemDTO">
 	update mem 
 <!-- 	<set>
 		<if test="name!=null">
 			name=#{name},
 		</if>
 		<if test="age!=0">
 			age=#{age},
 		</if>
 		<if test="loc!=null">
 			loc=#{loc}
 		</if>
 	</set> -->
 	<!-- prefix="set"은 컨텐츠가 리턴되기 전에 추가한다.
 		suffixOverrides="," 컨텐츠가 리턴되기 전에 제거한다.
 		 -->
 	<trim prefix="set" suffixOverrides=",">
 	<if test="name!=null">
 			name=#{name},
 		</if>
 		<if test="age!=0">
 			age=#{age},
 		</if>
 		<if test="loc!=null">
 			loc=#{loc}
 		</if>
 </trim>
 	where num=#{num}
 </update>
 
 <!-- choose 동적 SQL사용 -->
 <insert id="insData" parameterType="part02.dto.MemDTO">
  	insert into mem values(mem_num_seq.nextval,#{name},#{age},
  	<choose>
  	<when test="loc==null">
  	'test'
  	</when>
  	<otherwise>
  	#{loc}
  	</otherwise>
  	</choose>
  	)
 </insert>
 
 </mapper>